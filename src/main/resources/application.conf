play.http.secret.key = "cqrs-cache"
# Play session
play.http.session.cookieName = "CODE_SESSION"
play.http.session.maxAge = 5h

play.modules.enabled += "com.cqrscache.modules.CachingModule"
play.modules.enabled += "com.github.tototoshi.play2.json4s.jackson.Json4sModule"

rate-schedule {
  enabled = false
  interval = 5 seconds
}

play.filters.enabled += play.filters.hosts.AllowedHostsFilter
# HTTP Filters
play.filters.cors.pathPrefixes = ["/"]
play.filters.cors.allowedHttpMethods = ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
play.filters.cors.preflightMaxAge = 3600
play.filters.cors.exposedHeaders = ["Content-Disposition"]

play.filters.hosts {
  # Allow requests to example.com, its subdomains, and localhost:9000.
  allowed = ["cqrs-cache.herokuapp.com", "localhost:9000"]
}

play.evolutions.enabled=true
play.evolutions.autoApply=true

akka {
  stdout-loglevel = off // defaults to WARNING can be disabled with off. The stdout-loglevel is only in effect during system startup and shutdown
  log-dead-letters-during-shutdown = on
  loglevel = debug
  log-dead-letters = on
  log-config-on-start = off // Log the complete configuration at INFO level when the actor system is started

  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  actor {
    debug {
      receive = on // log all messages sent to an actor if that actors receive method is a LoggingReceive
      autoreceive = off // log all special messages like Kill, PoisoffPill etc sent to all actors
      lifecycle = off // log all actor lifecycle events of all actors
      fsm = off // enable logging of all events, transitioffs and timers of FSM Actors that extend LoggingFSM
      event-stream = off // enable logging of subscriptions (subscribe/unsubscribe) on the ActorSystem.eventStream
    }
    warn-about-java-serializer-usage = false
  }
}
jdbc-journal.logicalDelete = false

jdbc-read-journal {
  includeLogicallyDeleted = false
  refresh-interval = "10ms"
  max-buffer-size = "500"
}

slick.db.idleTimeout = 10000 // 10 seconds

akka {
  persistence {
    journal {
      plugin = "jdbc-journal"
      // Enable the line below to automatically start the journal when the actorsystem is started
      // auto-start-journals = ["jdbc-journal"]
    }
    snapshot-store {
      plugin = "jdbc-snapshot-store"
      // Enable the line below to automatically start the snapshot-store when the actorsystem is started
      // auto-start-snapshot-stores = ["jdbc-snapshot-store"]
    }
  }
}
jdbc-journal {
  slick = ${slick}
}

# the akka-persistence-snapshot-store in use
jdbc-snapshot-store {
  slick = ${slick}
}

# the akka-persistence-query provider in use
jdbc-read-journal {
  slick = ${slick}
}

db {
  default {
    url = "jdbc:postgresql://postgres-local:5432/postgres?user=postgres&password=postgres&reWriteBatchedInserts=true"
    url = ${?JDBC_DATABASE_URL}
    driver = "org.postgresql.Driver"
    # Connection Pool settings
    poolValidationQuery="select 1 as one"
    poolInitialSize = 64
    poolMaxSize = 256
    poolConnectionTimeoutMillis = 30000
    numThreads = 2
    maxConnections = 2
    minConnections = 1
  }
}
slick {
  profile = "slick.jdbc.PostgresProfile$"
  db {
    url = "jdbc:postgresql://postgres-local:5432/postgres?user=postgres&password=postgres&reWriteBatchedInserts=true"
    url = ${?JDBC_DATABASE_URL}
    driver = "org.postgresql.Driver"
    numThreads = 2
    maxConnections = 2
    minConnections = 1
  }
}
